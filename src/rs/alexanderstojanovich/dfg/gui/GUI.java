/* 
 * Copyright (C) 2020 Alexander Stojanovich <coas91@rocketmail.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package rs.alexanderstojanovich.dfg.gui;

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.WindowEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.URL;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JColorChooser;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.filechooser.FileNameExtensionFilter;
import rs.alexanderstojanovich.dfg.fonts.BMF;

/**
 *
 * @author Alexander Stojanovich <coas91@rocketmail.com>
 */
public class GUI extends javax.swing.JFrame {

    // State of the of the operation
    private enum Operation {
        LOAD, DERIVE
    };

    // Load font or derive font from existing one - the mode
    private Operation mode = Operation.LOAD;

    // Is the reset triggered by the GUI Thread
    private boolean resetTriggered = false;

    // internal logic of the GUI
    private final GUILogic guiLogic;

    // resources directory (folder)
    public static final String RESOURCES_DIR = "/rs/alexanderstojanovich/dfg/res/";

    // cool it's our new logo :)
    private static final String LOGO_FILE_NAME = "dfg_logo.png";
    // and logox variant with black outline
    private static final String LOGOX_FILE_NAME = "dfg_logox.png";

    // path to GNU General Public License logo
    private static final String LICENSE_LOGO_FILE_NAME = "gplv3_logo.png";

    // path to help
    private static final String HELP_FILE_NAME = "dfg_help.txt";

    // path to tips
    private static final String TIPS_FILE_NAME = "dfg_tips.txt";

    // used for synchronizing GUI SWING showing thread 
    // with working thread which refreshes the GUI
    private final Object objWrkRef = new Object();
    private final Object objWrkPal = new Object();

    // for synchornizing relevant to the reset
    private final Object objReset = new Object();

    // Working threads which refreshes gui and palette for the user
    private Thread workerRefresh, workerPalette;

    // Opened and saved file respectively
    private File openedFile, savedFile;

    // Initilaztion progress in percentage
    private static int progress = 0;

    /**
     * Creates new form NewJFrame
     */
    public GUI() {
        initComponents();
        progress += 25;
        initPosition();
        initRadioButtonGroup();
        progress += 17;
        initFontSelector();
        progress += 15;
        // initTextSampleArea();
        initDFGLogos();
        progress += 5;
        initDialogs();
        progress += 9;
        this.guiLogic = new GUILogic(this.palettePreview);
        progress += 13;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileOpener = new javax.swing.JFileChooser();
        fileSaver = new javax.swing.JFileChooser();
        radioButtonGroup = new javax.swing.ButtonGroup();
        fontPanel = new javax.swing.JPanel();
        fontSelector = new javax.swing.JComboBox<>();
        fontBold = new javax.swing.JCheckBox();
        fontItalic = new javax.swing.JCheckBox();
        fontSizeLabel = new javax.swing.JLabel();
        fontSize = new javax.swing.JSpinner();
        infoStrLabel = new javax.swing.JLabel();
        infoStrTextFld = new javax.swing.JTextField();
        testStrLabel = new javax.swing.JLabel();
        testStrTextFld = new javax.swing.JTextField();
        fontTestTransparency = new javax.swing.JCheckBox();
        fontModePanel = new javax.swing.JPanel();
        radioButtonCreate = new javax.swing.JRadioButton();
        radioButtonLoadPre = new javax.swing.JRadioButton();
        fontNameLabel = new javax.swing.JLabel();
        fontFormatPanel = new javax.swing.JPanel();
        fontLoadFormatLabel = new javax.swing.JLabel();
        fontLoadFormatTextFld = new javax.swing.JTextField();
        fontDerFormatLabel = new javax.swing.JLabel();
        fontDerFormatSelector = new javax.swing.JComboBox<>();
        textPanel = new javax.swing.JPanel();
        textSampleSP = new javax.swing.JScrollPane();
        textSample = new javax.swing.JTextArea();
        firstCharSemicolon = new javax.swing.JLabel();
        lastCharSemicolon = new javax.swing.JLabel();
        textFirstChar = new javax.swing.JSpinner();
        textLastChar = new javax.swing.JSpinner();
        textFirstCharValue = new javax.swing.JLabel();
        textLastCharValue = new javax.swing.JLabel();
        textSpacingLabel = new javax.swing.JLabel();
        textSpacing = new javax.swing.JSpinner();
        textSupportedIcon = new javax.swing.JLabel();
        textMultiplierLabel = new javax.swing.JLabel();
        textMultiplier = new javax.swing.JSpinner();
        effectsPanel = new javax.swing.JPanel();
        fgLabel = new javax.swing.JLabel();
        fgButton = new javax.swing.JButton();
        bgLabel = new javax.swing.JLabel();
        bgButton = new javax.swing.JButton();
        useGradient = new javax.swing.JCheckBox();
        useOutline = new javax.swing.JCheckBox();
        outlineLabel = new javax.swing.JLabel();
        outlineColorButton = new javax.swing.JButton();
        widthLabel = new javax.swing.JLabel();
        widthAmount = new javax.swing.JSpinner();
        useAntialiasing = new javax.swing.JCheckBox();
        palLabel = new javax.swing.JLabel();
        paletteSelector = new javax.swing.JComboBox<>();
        useShadow = new javax.swing.JCheckBox();
        shadowAngleLabel = new javax.swing.JLabel();
        shadowAngleValue = new javax.swing.JSpinner();
        shLabel = new javax.swing.JLabel();
        shColorButton = new javax.swing.JButton();
        palettePreview = new javax.swing.JPanel();
        imagePanel = new javax.swing.JPanel();
        imageScrollPane = new javax.swing.JScrollPane();
        imagePreview = new javax.swing.JLabel();
        imageZoomLabel = new javax.swing.JLabel();
        imageZoomSlider = new javax.swing.JSlider();
        imageZoomPercentLabel = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        fileOpen = new javax.swing.JMenuItem();
        separator1 = new javax.swing.JPopupMenu.Separator();
        fileSave = new javax.swing.JMenuItem();
        fileSaveAs = new javax.swing.JMenuItem();
        separator2 = new javax.swing.JPopupMenu.Separator();
        fileReset = new javax.swing.JMenuItem();
        separator3 = new javax.swing.JPopupMenu.Separator();
        fileQuit = new javax.swing.JMenuItem();
        infoMenu = new javax.swing.JMenu();
        infoAbout = new javax.swing.JMenuItem();
        infoHelp = new javax.swing.JMenuItem();
        infoTips = new javax.swing.JMenuItem();

        fileSaver.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Doom Font Genesis - WARDEN");
        setName("DoomFontGenesis"); // NOI18N
        setResizable(false);
        setSize(new java.awt.Dimension(1000, 600));
        getContentPane().setLayout(new java.awt.GridLayout(2, 2));

        fontPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Font", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP));

        fontSelector.setEnabled(false);
        fontSelector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fontSelectorActionPerformed(evt);
            }
        });

        fontBold.setText("Bold");
        fontBold.setEnabled(false);
        fontBold.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fontBoldActionPerformed(evt);
            }
        });

        fontItalic.setText("Italic");
        fontItalic.setEnabled(false);
        fontItalic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fontItalicActionPerformed(evt);
            }
        });

        fontSizeLabel.setText("Size:");
        fontSizeLabel.setEnabled(false);

        fontSize.setModel(new javax.swing.SpinnerNumberModel(12, 1, 240, 1));
        fontSize.setEnabled(false);
        fontSize.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                fontSizeStateChanged(evt);
            }
        });

        infoStrLabel.setText("Info:");

        infoStrTextFld.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                infoStrTextFldActionPerformed(evt);
            }
        });

        testStrLabel.setText("Test:");

        testStrTextFld.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testStrTextFldActionPerformed(evt);
            }
        });

        fontTestTransparency.setText("Display Image transparency");
        fontTestTransparency.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fontTestTransparencyActionPerformed(evt);
            }
        });

        fontModePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Mode", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));

        radioButtonCreate.setText("Create from preexisting font");
        radioButtonCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioButtonCreateActionPerformed(evt);
            }
        });

        radioButtonLoadPre.setSelected(true);
        radioButtonLoadPre.setText("Load existing Doom font");
        radioButtonLoadPre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioButtonLoadPreActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout fontModePanelLayout = new javax.swing.GroupLayout(fontModePanel);
        fontModePanel.setLayout(fontModePanelLayout);
        fontModePanelLayout.setHorizontalGroup(
            fontModePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fontModePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(fontModePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(radioButtonCreate)
                    .addComponent(radioButtonLoadPre))
                .addContainerGap())
        );

        fontModePanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {radioButtonCreate, radioButtonLoadPre});

        fontModePanelLayout.setVerticalGroup(
            fontModePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fontModePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(radioButtonLoadPre)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(radioButtonCreate)
                .addContainerGap())
        );

        fontNameLabel.setText("Font:");

        fontFormatPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Format", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));

        fontLoadFormatLabel.setText("Loaded:");

        fontLoadFormatTextFld.setEditable(false);

        fontDerFormatLabel.setText("Derived:");

        fontDerFormatSelector.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Console Font (FON1)", "Big Font (FON2)", "Byte Map Font (BMF)" }));
        fontDerFormatSelector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fontDerFormatSelectorActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout fontFormatPanelLayout = new javax.swing.GroupLayout(fontFormatPanel);
        fontFormatPanel.setLayout(fontFormatPanelLayout);
        fontFormatPanelLayout.setHorizontalGroup(
            fontFormatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fontFormatPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(fontFormatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(fontFormatPanelLayout.createSequentialGroup()
                        .addComponent(fontLoadFormatLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fontLoadFormatTextFld, javax.swing.GroupLayout.DEFAULT_SIZE, 141, Short.MAX_VALUE))
                    .addGroup(fontFormatPanelLayout.createSequentialGroup()
                        .addComponent(fontDerFormatLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fontDerFormatSelector, 0, 1, Short.MAX_VALUE)))
                .addContainerGap())
        );
        fontFormatPanelLayout.setVerticalGroup(
            fontFormatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fontFormatPanelLayout.createSequentialGroup()
                .addGroup(fontFormatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fontLoadFormatLabel)
                    .addComponent(fontLoadFormatTextFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(fontFormatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fontDerFormatLabel)
                    .addComponent(fontDerFormatSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 12, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout fontPanelLayout = new javax.swing.GroupLayout(fontPanel);
        fontPanel.setLayout(fontPanelLayout);
        fontPanelLayout.setHorizontalGroup(
            fontPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fontPanelLayout.createSequentialGroup()
                .addComponent(fontModePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fontFormatPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(fontPanelLayout.createSequentialGroup()
                .addGroup(fontPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(fontPanelLayout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(fontBold)
                        .addGap(12, 12, 12)
                        .addComponent(fontItalic)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 176, Short.MAX_VALUE)
                        .addComponent(fontSizeLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fontSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(fontPanelLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(fontPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(testStrLabel)
                            .addComponent(infoStrLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(fontNameLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(fontPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(fontPanelLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(fontTestTransparency))
                            .addComponent(infoStrTextFld)
                            .addComponent(testStrTextFld)
                            .addComponent(fontSelector, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );

        fontPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {fontBold, fontItalic});

        fontPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {fontFormatPanel, fontModePanel});

        fontPanelLayout.setVerticalGroup(
            fontPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, fontPanelLayout.createSequentialGroup()
                .addGroup(fontPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fontModePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fontFormatPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(fontPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fontSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fontNameLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(fontPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fontBold)
                    .addComponent(fontItalic)
                    .addComponent(fontSizeLabel)
                    .addComponent(fontSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(fontPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(infoStrTextFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(infoStrLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(fontPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(testStrLabel)
                    .addComponent(testStrTextFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fontTestTransparency)
                .addContainerGap(27, Short.MAX_VALUE))
        );

        fontPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {fontFormatPanel, fontModePanel});

        getContentPane().add(fontPanel);

        textPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Text", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP));

        textSampleSP.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Sample", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP));

        textSample.setEditable(false);
        textSample.setColumns(20);
        textSample.setRows(5);
        textSample.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                textSampleCaretUpdate(evt);
            }
        });
        textSample.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                textSampleInputMethodTextChanged(evt);
            }
        });
        textSampleSP.setViewportView(textSample);

        firstCharSemicolon.setText("First Char (ASCII):");

        lastCharSemicolon.setText("Last Char (ASCII):");

        textFirstChar.setModel(new javax.swing.SpinnerNumberModel(32, 0, 255, 1));
        textFirstChar.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                textFirstCharStateChanged(evt);
            }
        });

        textLastChar.setModel(new javax.swing.SpinnerNumberModel(127, 0, 255, 1));
        textLastChar.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                textLastCharStateChanged(evt);
            }
        });

        textFirstCharValue.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        textFirstCharValue.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        textLastCharValue.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        textLastCharValue.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        textSpacingLabel.setText("Spacing:");

        textSpacing.setModel(new javax.swing.SpinnerNumberModel(0, 0, 10, 1));
        textSpacing.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                textSpacingStateChanged(evt);
            }
        });

        textSupportedIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/rs/alexanderstojanovich/dfg/res/dfg_supported.png"))); // NOI18N

        textMultiplierLabel.setText("Multiplier:");

        textMultiplier.setModel(new javax.swing.SpinnerNumberModel(1.0d, 1.0d, 10.0d, 0.1d));
        textMultiplier.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                textMultiplierStateChanged(evt);
            }
        });

        javax.swing.GroupLayout textPanelLayout = new javax.swing.GroupLayout(textPanel);
        textPanel.setLayout(textPanelLayout);
        textPanelLayout.setHorizontalGroup(
            textPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(textSampleSP, javax.swing.GroupLayout.DEFAULT_SIZE, 440, Short.MAX_VALUE)
            .addGroup(textPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(textPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(textPanelLayout.createSequentialGroup()
                        .addComponent(textMultiplierLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textMultiplier, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(textPanelLayout.createSequentialGroup()
                        .addGroup(textPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lastCharSemicolon)
                            .addComponent(firstCharSemicolon)
                            .addComponent(textSpacingLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(textPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(textSpacing, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textLastChar, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textFirstChar, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(textPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(textLastCharValue, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(textFirstCharValue, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textSupportedIcon)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        textPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {textFirstChar, textLastChar, textSpacing});

        textPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {textFirstCharValue, textLastCharValue});

        textPanelLayout.setVerticalGroup(
            textPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, textPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(textPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(textPanelLayout.createSequentialGroup()
                        .addGroup(textPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(textPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(firstCharSemicolon)
                                .addComponent(textFirstChar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(textFirstCharValue, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(textPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(textLastCharValue, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(textPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lastCharSemicolon)
                                .addComponent(textLastChar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(textPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(textSpacingLabel)
                            .addComponent(textSpacing, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(textPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(textMultiplierLabel)
                            .addComponent(textMultiplier, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(textSupportedIcon))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addComponent(textSampleSP, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        textPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {textFirstChar, textLastChar, textSpacing});

        textPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {textFirstCharValue, textLastCharValue});

        getContentPane().add(textPanel);

        effectsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Effects", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP));

        fgLabel.setText("Foreground color:");

        fgButton.setBorder(null);
        fgButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fgButtonActionPerformed(evt);
            }
        });

        bgLabel.setText("Background color:");

        bgButton.setBorder(null);
        bgButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bgButtonActionPerformed(evt);
            }
        });

        useGradient.setText("Gradient");
        useGradient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useGradientActionPerformed(evt);
            }
        });

        useOutline.setText("Outline");
        useOutline.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useOutlineActionPerformed(evt);
            }
        });

        outlineLabel.setText("Outline color:");

        outlineColorButton.setBorder(null);
        outlineColorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outlineColorButtonActionPerformed(evt);
            }
        });

        widthLabel.setText("Width:");

        widthAmount.setModel(new javax.swing.SpinnerNumberModel(1, 1, 10, 1));
        widthAmount.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                widthAmountStateChanged(evt);
            }
        });

        useAntialiasing.setText("Antialiasing");
        useAntialiasing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useAntialiasingActionPerformed(evt);
            }
        });

        palLabel.setText("Palette:");

        paletteSelector.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None", "6-bit RGB", "8-bit RGB", "Doom", "Heretic", "Hexen" }));
        paletteSelector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paletteSelectorActionPerformed(evt);
            }
        });

        useShadow.setText("Shadow");
        useShadow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useShadowActionPerformed(evt);
            }
        });

        shadowAngleLabel.setText("Angle:");

        shadowAngleValue.setModel(new javax.swing.SpinnerNumberModel(45, 0, 360, 1));
        shadowAngleValue.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                shadowAngleValueStateChanged(evt);
            }
        });

        shLabel.setText("Shadow color:");

        shColorButton.setBorder(null);
        shColorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shColorButtonActionPerformed(evt);
            }
        });

        palettePreview.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Palette", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP));
        palettePreview.setPreferredSize(new java.awt.Dimension(240, 240));
        palettePreview.setLayout(new java.awt.GridLayout(16, 16, 1, 1));

        javax.swing.GroupLayout effectsPanelLayout = new javax.swing.GroupLayout(effectsPanel);
        effectsPanel.setLayout(effectsPanelLayout);
        effectsPanelLayout.setHorizontalGroup(
            effectsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(effectsPanelLayout.createSequentialGroup()
                .addGroup(effectsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, effectsPanelLayout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addGroup(effectsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(shLabel)
                            .addGroup(effectsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(bgLabel)
                                .addComponent(outlineLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(fgLabel, javax.swing.GroupLayout.Alignment.TRAILING)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(effectsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, effectsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(bgButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(outlineColorButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(fgButton, javax.swing.GroupLayout.DEFAULT_SIZE, 75, Short.MAX_VALUE))
                            .addComponent(shColorButton, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, effectsPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(effectsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, effectsPanelLayout.createSequentialGroup()
                                .addComponent(palLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(paletteSelector, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, effectsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(useGradient)
                                .addGroup(effectsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, effectsPanelLayout.createSequentialGroup()
                                        .addComponent(useShadow)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(shadowAngleLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(shadowAngleValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, effectsPanelLayout.createSequentialGroup()
                                        .addGroup(effectsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(useAntialiasing)
                                            .addComponent(useOutline, javax.swing.GroupLayout.Alignment.TRAILING))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(widthLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(widthAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(palettePreview, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        effectsPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {bgButton, fgButton, outlineColorButton, paletteSelector, shColorButton});

        effectsPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {useAntialiasing, useGradient, useOutline});

        effectsPanelLayout.setVerticalGroup(
            effectsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(effectsPanelLayout.createSequentialGroup()
                .addComponent(palettePreview, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(effectsPanelLayout.createSequentialGroup()
                .addGroup(effectsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fgLabel)
                    .addComponent(fgButton, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(effectsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bgLabel)
                    .addComponent(bgButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(effectsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(outlineLabel)
                    .addComponent(outlineColorButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(effectsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(shLabel)
                    .addComponent(shColorButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(effectsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(palLabel)
                    .addComponent(paletteSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(useGradient)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(effectsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(useOutline)
                    .addComponent(widthLabel)
                    .addComponent(widthAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(useAntialiasing)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(effectsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(useShadow)
                    .addComponent(shadowAngleLabel)
                    .addComponent(shadowAngleValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12))
        );

        effectsPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {bgButton, fgButton, outlineColorButton, shColorButton});

        effectsPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {useAntialiasing, useGradient, useOutline, widthAmount, widthLabel});

        getContentPane().add(effectsPanel);

        imagePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Image", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));

        imagePreview.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        imageScrollPane.setViewportView(imagePreview);

        imageZoomLabel.setText("Zoom:");

        imageZoomSlider.setMajorTickSpacing(10);
        imageZoomSlider.setMaximum(400);
        imageZoomSlider.setMinimum(10);
        imageZoomSlider.setSnapToTicks(true);
        imageZoomSlider.setValue(100);
        imageZoomSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                imageZoomSliderStateChanged(evt);
            }
        });

        imageZoomPercentLabel.setText("100%");

        javax.swing.GroupLayout imagePanelLayout = new javax.swing.GroupLayout(imagePanel);
        imagePanel.setLayout(imagePanelLayout);
        imagePanelLayout.setHorizontalGroup(
            imagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(imagePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(imagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(imageScrollPane)
                    .addGroup(imagePanelLayout.createSequentialGroup()
                        .addComponent(imageZoomLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(imageZoomSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(imageZoomPercentLabel)
                        .addGap(0, 6, Short.MAX_VALUE)))
                .addContainerGap())
        );
        imagePanelLayout.setVerticalGroup(
            imagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(imagePanelLayout.createSequentialGroup()
                .addComponent(imageScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(imagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(imageZoomSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(imageZoomLabel, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(imageZoomPercentLabel, javax.swing.GroupLayout.Alignment.LEADING))
                .addContainerGap())
        );

        getContentPane().add(imagePanel);

        fileMenu.setText("File");

        fileOpen.setText("Open...");
        fileOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileOpenActionPerformed(evt);
            }
        });
        fileMenu.add(fileOpen);
        fileMenu.add(separator1);

        fileSave.setText("Save");
        fileSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileSaveActionPerformed(evt);
            }
        });
        fileMenu.add(fileSave);

        fileSaveAs.setText("Save As...");
        fileSaveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileSaveAsActionPerformed(evt);
            }
        });
        fileMenu.add(fileSaveAs);
        fileMenu.add(separator2);

        fileReset.setText("Reset");
        fileReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileResetActionPerformed(evt);
            }
        });
        fileMenu.add(fileReset);
        fileMenu.add(separator3);

        fileQuit.setText("Quit");
        fileQuit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileQuitActionPerformed(evt);
            }
        });
        fileMenu.add(fileQuit);

        menuBar.add(fileMenu);

        infoMenu.setText("Info");

        infoAbout.setText("About");
        infoAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                infoAboutActionPerformed(evt);
            }
        });
        infoMenu.add(infoAbout);

        infoHelp.setText("Help");
        infoHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                infoHelpActionPerformed(evt);
            }
        });
        infoMenu.add(infoHelp);

        infoTips.setText("Tips");
        infoTips.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                infoTipsActionPerformed(evt);
            }
        });
        infoMenu.add(infoTips);

        menuBar.add(infoMenu);

        setJMenuBar(menuBar);

        getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void fileSaveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileSaveAsActionPerformed
        // TODO add your handling code here:                    
        fileSave();
    }//GEN-LAST:event_fileSaveAsActionPerformed

    private void fileOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileOpenActionPerformed
        // TODO add your handling code here:
        fileOpen();
    }//GEN-LAST:event_fileOpenActionPerformed

    private void fileQuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileQuitActionPerformed
        // TODO add your handling code here:
        activateRefresh();
        this.dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
    }//GEN-LAST:event_fileQuitActionPerformed

    private void textFirstCharStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_textFirstCharStateChanged
        // TODO add your handling code here:
        updateSpinners();
        activateRefresh();
    }//GEN-LAST:event_textFirstCharStateChanged

    private void textSampleInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_textSampleInputMethodTextChanged
        // TODO add your handling code here:
        activateRefresh();
    }//GEN-LAST:event_textSampleInputMethodTextChanged

    private void textLastCharStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_textLastCharStateChanged
        // TODO add your handling code here:
        updateSpinners();
        activateRefresh();
    }//GEN-LAST:event_textLastCharStateChanged

    private void textSampleCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_textSampleCaretUpdate
        // TODO add your handling code here:
        activateRefresh();
    }//GEN-LAST:event_textSampleCaretUpdate

    private void fontSelectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fontSelectorActionPerformed
        // TODO add your handling code here:
        updateFont();
        activateRefresh();
    }//GEN-LAST:event_fontSelectorActionPerformed

    private void fontBoldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fontBoldActionPerformed
        // TODO add your handling code here:
        updateFont();
        activateRefresh();
    }//GEN-LAST:event_fontBoldActionPerformed

    private void fontSizeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_fontSizeStateChanged
        // TODO add your handling code here:
        updateFont();
        activateRefresh();
    }//GEN-LAST:event_fontSizeStateChanged

    private void fontItalicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fontItalicActionPerformed
        // TODO add your handling code here:
        updateFont();
        activateRefresh();
    }//GEN-LAST:event_fontItalicActionPerformed

    private void radioButtonCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioButtonCreateActionPerformed
        // TODO add your handling code here:        
        this.mode = Operation.DERIVE;
        this.imageZoomSlider.setValue(100);
        updateColors(); // update the colors in the Effects section
        updateFont(); // update the font from the Font section
        updateSpinners(); // update the values from character range in the Text section
        activatePalette(); // wake up the thread which refreshes the palette and calls "activate Refresh" thread
    }//GEN-LAST:event_radioButtonCreateActionPerformed

    private void radioButtonLoadPreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioButtonLoadPreActionPerformed
        // TODO add your handling code here:        
        this.mode = Operation.LOAD;
        this.imageZoomSlider.setValue(100);
        activatePalette();
    }//GEN-LAST:event_radioButtonLoadPreActionPerformed

    private void useAntialiasingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useAntialiasingActionPerformed
        // TODO add your handling code here:
        activateRefresh();
    }//GEN-LAST:event_useAntialiasingActionPerformed

    private void fgButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fgButtonActionPerformed
        // TODO add your handling code here:
        Color color = JColorChooser.showDialog(this, "Choose Foreground Color", this.guiLogic.getFgColor());
        if (color != null) {
            this.guiLogic.setFgColor(color);
        }
        activateRefresh();
    }//GEN-LAST:event_fgButtonActionPerformed

    private void bgButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bgButtonActionPerformed
        // TODO add your handling code here:
        Color color = JColorChooser.showDialog(this, "Choose Background Color", this.guiLogic.getBgColor());
        if (color != null) {
            this.guiLogic.setBgColor(color);
        }
        activateRefresh();
    }//GEN-LAST:event_bgButtonActionPerformed

    private void useGradientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useGradientActionPerformed
        // TODO add your handling code here:
        activateRefresh();
    }//GEN-LAST:event_useGradientActionPerformed

    private void outlineColorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outlineColorButtonActionPerformed
        // TODO add your handling code here:
        Color color = JColorChooser.showDialog(this, "Choose Outline Color", this.guiLogic.getOutlineColor());
        if (color != null) {
            this.guiLogic.setOutlineColor(color);
        }
        activateRefresh();
    }//GEN-LAST:event_outlineColorButtonActionPerformed

    private void useOutlineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useOutlineActionPerformed
        // TODO add your handling code here:
        activateRefresh();
    }//GEN-LAST:event_useOutlineActionPerformed

    private void widthAmountStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_widthAmountStateChanged
        // TODO add your handling code here:
        activateRefresh();
    }//GEN-LAST:event_widthAmountStateChanged

    private void textSpacingStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_textSpacingStateChanged
        // TODO add your handling code here:
        updateSpinners();
        activateRefresh();
    }//GEN-LAST:event_textSpacingStateChanged

    private void fileSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileSaveActionPerformed
        // TODO add your handling code here:
        fileOverwrite();
    }//GEN-LAST:event_fileSaveActionPerformed

    private void infoStrTextFldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_infoStrTextFldActionPerformed
        // TODO add your handling code here:
        activateRefresh();
    }//GEN-LAST:event_infoStrTextFldActionPerformed

    private void paletteSelectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paletteSelectorActionPerformed
        // TODO add your handling code here:
//        activateRefresh(); -- bad refresh and palette are in race condition :(
        activatePalette();
    }//GEN-LAST:event_paletteSelectorActionPerformed

    private void fileResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileResetActionPerformed
        // TODO add your handling code here:        
        reset();
    }//GEN-LAST:event_fileResetActionPerformed

    private void infoHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_infoHelpActionPerformed
        // TODO add your handling code here:
        infoHelp();
    }//GEN-LAST:event_infoHelpActionPerformed

    private void infoAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_infoAboutActionPerformed
        // TODO add your handling code here:
        infoAbout();
    }//GEN-LAST:event_infoAboutActionPerformed

    private void infoTipsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_infoTipsActionPerformed
        // TODO add your handling code here:
        infoTips();
    }//GEN-LAST:event_infoTipsActionPerformed

    private void testStrTextFldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testStrTextFldActionPerformed
        // TODO add your handling code here:
        activateRefresh();
    }//GEN-LAST:event_testStrTextFldActionPerformed

    private void fontTestTransparencyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fontTestTransparencyActionPerformed
        // TODO add your handling code here:
        activateRefresh();
    }//GEN-LAST:event_fontTestTransparencyActionPerformed

    private void fontDerFormatSelectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fontDerFormatSelectorActionPerformed
        // TODO add your handling code here:
        updateFormat(); // update the format in the Font section
        updateFont();   // update the font from the Font section
        updateSpinners();  // update the values from character range in the Text section
        activateRefresh(); // wake up the thread which refreshes the palette and calls "activate Refresh" thread
    }//GEN-LAST:event_fontDerFormatSelectorActionPerformed

    private void imageZoomSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_imageZoomSliderStateChanged
        // TODO add your handling code here:
        this.imageZoomPercentLabel.setText(String.valueOf(this.imageZoomSlider.getValue()) + "%");
        activateRefresh();
    }//GEN-LAST:event_imageZoomSliderStateChanged

    private void textMultiplierStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_textMultiplierStateChanged
        // TODO add your handling code here:
        activateRefresh();
    }//GEN-LAST:event_textMultiplierStateChanged

    private void useShadowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useShadowActionPerformed
        // TODO add your handling code here:
        activateRefresh();
    }//GEN-LAST:event_useShadowActionPerformed

    private void shadowAngleValueStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_shadowAngleValueStateChanged
        // TODO add your handling code here:
        activateRefresh();
    }//GEN-LAST:event_shadowAngleValueStateChanged

    private void shColorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shColorButtonActionPerformed
        // TODO add your handling code here:
        Color color = JColorChooser.showDialog(this, "Choose Shadow Color", this.guiLogic.getShadowColor());
        if (color != null) {
            this.guiLogic.setShadowColor(color);
        }
        activateRefresh();
    }//GEN-LAST:event_shColorButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */

        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
            // SET DARCULA LOOK AND FEEL!
            UIManager.setLookAndFeel("com.bulenkov.darcula.DarculaLaf");
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>        
        GUISplashScreen splashScreen = new GUISplashScreen();
        splashScreen.setUp();
        Thread splashUpdater = new Thread(splashScreen, "Splash Screen Updater");
        splashUpdater.start();
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                GUI gui = new GUI();
                gui.setVisible(true);
                // Making thread which work is to refresh the gui
                gui.workerRefresh = new Thread("Refresh Working Thread") {
                    @Override
                    public void run() {
                        while (gui.isVisible()) {
                            gui.workRefresh();
                        }
                    }
                };
                gui.workerRefresh.start();
                GUI.progress += 8;
                // Making thread which work is to refresh the palette
                gui.workerPalette = new Thread("Palette Working Thread") {
                    @Override
                    public void run() {
                        while (gui.isVisible()) {
                            gui.workPalette();
                        }
                    }
                };
                gui.workerPalette.start();
                GUI.progress += 8;
            }
        });
    }

    // return progress for splash screen purpose
    public static int getProgress() {
        return progress;
    }

    // Fetch all the fonts (their names) installed on the system (this OS)
    private static ArrayList<String> getAllFontFamily() {
        ArrayList<String> names = new ArrayList<String>();
        GraphicsEnvironment graphEnvi = GraphicsEnvironment.getLocalGraphicsEnvironment();
        Font[] fonts = graphEnvi.getAllFonts();
        for (Font font : fonts) {
            if (!names.contains(font.getFamily())) {
                names.add(font.getFamily());
            }
        }
        return names;
    }

    // Center the GUI window into center of the screen
    private void initPosition() {
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width / 2 - this.getSize().width / 2, dim.height / 2 - this.getSize().height / 2);
    }

    // initializes font selection for making the BMF, combo box
    private void initFontSelector() {
        ArrayList<String> familyNames = getAllFontFamily();
        for (int i = 0; i < familyNames.size(); i++) {
            fontSelector.addItem(familyNames.get(i));
        }
    }

    // init radio group of mode selecting (LOAD / DERIVE)
    private void initRadioButtonGroup() {
        radioButtonGroup.add(radioButtonCreate);
        radioButtonGroup.add(radioButtonLoadPre);
    }

    // init both logos
    private void initDFGLogos() {
        URL url_logo = getClass().getResource(RESOURCES_DIR + LOGO_FILE_NAME);
        URL url_logox = getClass().getResource(RESOURCES_DIR + LOGOX_FILE_NAME);
        if (url_logo != null && url_logox != null) {
            ImageIcon logo = new ImageIcon(url_logo);
            ImageIcon logox = new ImageIcon(url_logox);
            ArrayList<Image> icons = new ArrayList<Image>();
            icons.add(logo.getImage());
            icons.add(logox.getImage());
            icons.add(logox.getImage());
            this.setIconImages(icons);//.getScaledInstance(23, 14, Image.SCALE_SMOOTH));
        }
    }

    // init dialog for opening the files, setting it's filters
    private void initDialogs() {
        FileNameExtensionFilter lmpFilter = new FileNameExtensionFilter("Doom Font Lump (*.lmp)", "lmp");
        FileNameExtensionFilter bmfFilter = new FileNameExtensionFilter("Byte Map Font (*.bmf)", "bmf");

        fileOpener.addChoosableFileFilter(lmpFilter);
        fileOpener.addChoosableFileFilter(bmfFilter);

        fileSaver.addChoosableFileFilter(lmpFilter);
        fileSaver.addChoosableFileFilter(bmfFilter);
    }

    // trigger the smaller thread to work
    private void activateRefresh() {
        synchronized (objWrkRef) {
            objWrkRef.notify();
        }
    }

    // trigger the bigger thread to work (which calls smaller thread)
    private void activatePalette() {
        synchronized (objWrkPal) {
            objWrkPal.notify();
        }
    }

    // Open the file, the font type {FON1, FON2, BMF} will be recognized,
    // it opens and set the mode to true
    private void fileOpen() {
        int returnVal = fileOpener.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            openedFile = fileOpener.getSelectedFile();
            boolean success = this.guiLogic.fileOpen(openedFile);
            if (success) {
                radioButtonLoadPre.setSelected(true);
                this.imageZoomSlider.setValue(100); // resets the slider to 100%
                mode = Operation.LOAD; // just for any case sets the mode to LOAD
                activateRefresh(); // needs to be refreshed again since it's loaded..
                JOptionPane.showMessageDialog(this,
                        "File opened successfuly!",
                        "File Open",
                        JOptionPane.INFORMATION_MESSAGE);
            } else {
                String errorMsg = (this.guiLogic.getFontLoad() != null) ? this.guiLogic.getFontLoad().getErrorMsg() : "Error - Invalid header!";
                JOptionPane.showMessageDialog(this,
                        "File open resulted in error!" + "\n" + errorMsg,
                        "File Open",
                        JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private void fileSave() {
        activateRefresh(); // needs to be refreshed again before save..
        // so in order to save Font we need either to be loaded
        // or image from which we generate to be not null..
        if (this.guiLogic.getFontLoad() != null || this.guiLogic.getImageRender() != null) {
            int returnVal = fileSaver.showSaveDialog(this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                savedFile = fileSaver.getSelectedFile();
                boolean success = false;
                if (mode == Operation.LOAD) { // if we choose to save already loaded font
                    success = this.guiLogic.fileSaveFontLoad(savedFile);
                } else if (mode == Operation.DERIVE) { // if we choose to save generated font from image and context                                                           
                    success = this.guiLogic.fileSaveFontDer(savedFile);
                }
                if (!success) {
                    JOptionPane.showMessageDialog(this,
                            "File save failed!",
                            "File Save",
                            JOptionPane.ERROR_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(this,
                            "File save successful!",
                            "File Save",
                            JOptionPane.INFORMATION_MESSAGE);
                }
            }
        } else {
            JOptionPane.showMessageDialog(this,
                    "Nothing to save!",
                    "File Save",
                    JOptionPane.ERROR_MESSAGE);
        }
    }

    // Overwrite correspoding font file 
    private void fileOverwrite() {
        activateRefresh();
        // so in order to save Font we need either to be loaded
        // or image from which we generate to be not null..
        if (savedFile == null) {
            fileSave();
        } else {
            if (this.guiLogic.getFontLoad() != null || this.guiLogic.getImageRender() != null) {
                boolean success = false;
                if (mode == Operation.LOAD) { // if we choose to save already loaded Font
                    success = this.guiLogic.fileSaveFontLoad(savedFile);
                } else if (mode == Operation.DERIVE) { // if we choose to save generated BMF from image and context                                                           
                    success = this.guiLogic.fileSaveFontDer(savedFile);
                }
                if (!success) {
                    JOptionPane.showMessageDialog(this,
                            "File save failed!",
                            "File Save",
                            JOptionPane.ERROR_MESSAGE);
                } else {

                    JOptionPane.showMessageDialog(this,
                            "File save successful!",
                            "File Save",
                            JOptionPane.INFORMATION_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this,
                        "Nothing to save!",
                        "File Save",
                        JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    // update the format in the Font region
    private void updateFormat() {
        switch (fontDerFormatSelector.getSelectedIndex()) {
            case 0:
                guiLogic.setFontFormat("FON1");
                break;
            case 1:
                guiLogic.setFontFormat("FON2");
                break;
            case 2:
                guiLogic.setFontFormat("BMF");
                break;
        }
    }

    // update font in the Font region
    private void updateFont() {
        Font font;
        if (fontBold.isSelected() && fontItalic.isSelected()) {
            font = new Font((String) fontSelector.getSelectedItem(), Font.BOLD + Font.ITALIC, (Integer) fontSize.getValue());
        } else if (fontBold.isSelected()) {
            font = new Font((String) fontSelector.getSelectedItem(), Font.BOLD, (Integer) fontSize.getValue());
        } else if (fontItalic.isSelected()) {
            font = new Font((String) fontSelector.getSelectedItem(), Font.ITALIC, (Integer) fontSize.getValue());
        } else {
            font = new Font((String) fontSelector.getSelectedItem(), Font.PLAIN, (Integer) fontSize.getValue());
        }
        // set the font in the text sample for display
        this.textSample.setFont(font);
        if (this.guiLogic != null) {
            this.guiLogic.setMyFont(font);
        }
    }

    // update spinners in the Text region
    private void updateSpinners() {
        int first = (Integer) textFirstChar.getValue();
        char firstChar = (char) first;
        textFirstCharValue.setText(String.valueOf(firstChar));

        int last = (Integer) textLastChar.getValue();
        char lastChar = (char) last;
        textLastCharValue.setText(String.valueOf(lastChar));

        StringBuilder sb = new StringBuilder();
        if ((int) textFirstChar.getValue() <= (int) textLastChar.getValue()) {
            if (this.guiLogic.getFontFormat() != null && !this.guiLogic.getFontFormat().equals("FON1")) {
                for (int i = (Integer) textFirstChar.getValue(); i <= (Integer) textLastChar.getValue(); i++) {
                    sb.append((char) (i));
                }
                this.guiLogic.setMyText(sb.toString());
                textSample.setText(sb.toString());
            } else {
                for (int i = 0; i < 256; i++) {
                    sb.append((char) (i));
                }
                this.guiLogic.setMyText(sb.toString());
                textSample.setText(sb.toString());
            }
        }
        this.guiLogic.setSpacing((Integer) textSpacing.getValue());
    }

    // updating the colors on the GUI
    private void updateColors() {
        fgButton.setBackground(this.guiLogic.getFgColor());
        bgButton.setBackground(this.guiLogic.getBgColor());
        outlineColorButton.setBackground(this.guiLogic.getOutlineColor());
        shColorButton.setBackground(this.guiLogic.getShadowColor());
    }

    // enables or disables components on 3 JPanels depending on operation LOAD/DERIVE
    private void setEnabledRegions(boolean bool) {
        infoStrTextFld.setEditable(bool && guiLogic != null
                && guiLogic.getFontFormat() != null && guiLogic.getFontFormat().equals("BMF"));
        testStrTextFld.setEditable(!bool);

        fontDerFormatSelector.setEnabled(bool);

        fontSelector.setEnabled(bool);
        fontBold.setEnabled(bool);
        fontItalic.setEnabled(bool);
        fontSize.setEnabled(bool);
        fontSizeLabel.setEnabled(bool);

        for (int i = 0; i < textPanel.getComponentCount(); i++) {
            Component comp = textPanel.getComponent(i);
            comp.setEnabled(bool);
        }

        for (int i = 0; i < effectsPanel.getComponentCount(); i++) {
            Component comp = effectsPanel.getComponent(i);
            comp.setEnabled(bool);
        }
    }

    // GUI Refresh method
    private void workRefresh() {
        if (!resetTriggered) { // reset triggered is what prevents those threads from working                        
            updateColors();
            ImageIcon icon = null;
            imagePreview.setIcon(icon);

            if (guiLogic.getFontLoad() != null) {
                switch (guiLogic.getFontLoad().getType()) {
                    case "FON1":
                        this.fontLoadFormatTextFld.setText("Console Font (FON1)");
                        break;
                    case "FON2":
                        this.fontLoadFormatTextFld.setText("Big Font (FON2)");
                        break;
                    case "BMF":
                        this.fontLoadFormatTextFld.setText("Byte Map Font (BMF)");
                        break;
                    default:
                        this.fontLoadFormatTextFld.setText("");
                        break;
                }
            } else {
                this.fontLoadFormatTextFld.setText("");
            }

            this.guiLogic.setZoom(this.imageZoomSlider.getValue());

            if (this.mode == Operation.DERIVE) {

                setEnabledRegions(true); // enables many features                                                              

                this.guiLogic.setMyInfo(infoStrTextFld.getText());

                int outlineWidth = useOutline.isSelected() ? (Integer) widthAmount.getValue() : 0;

                icon = this.guiLogic.giveFontDerIcon(guiLogic.getFontFormat().equals("FON1"),
                        fontTestTransparency.isSelected(), useAntialiasing.isSelected(),
                        useGradient.isSelected(), outlineWidth,
                        useShadow.isSelected(), (int) shadowAngleValue.getValue(),
                        (double) textMultiplier.getValue()
                );
            } else if (this.mode == Operation.LOAD) {
                setEnabledRegions(false); // disables many features                                 
                textSample.setText("");
                if (this.guiLogic.getFontLoad() != null) {
                    if (this.guiLogic.getFontLoad() instanceof BMF) {
                        BMF bmfLoad = (BMF) this.guiLogic.getFontLoad();
                        infoStrTextFld.setText(bmfLoad.getInfo());
                    } else {
                        infoStrTextFld.setText("");
                    }
                    this.guiLogic.setMyTest(testStrTextFld.getText());
                    icon = this.guiLogic.giveFontLoadIcon(fontTestTransparency.isSelected());
                }
            }

            if (useOutline.isSelected()) {
                widthLabel.setEnabled(true);
                widthAmount.setEnabled(true);
            } else {
                widthLabel.setEnabled(false);
                widthAmount.setEnabled(false);
            }

            imagePreview.setIcon(icon);

            synchronized (objReset) {
                objReset.notify();
            }

            synchronized (objWrkRef) {
                try {
                    objWrkRef.wait();
                } catch (InterruptedException ex) {
                    Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        } else {
            try {
                synchronized (objReset) {
                    objReset.wait();
                }
            } catch (InterruptedException ex) {
                Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    // Palette refresh method
    private void workPalette() {
        if (!this.resetTriggered) { // reset triggered is what prevents those threads from working
            String selectedItem = (String) paletteSelector.getSelectedItem();
            palettePreview.setEnabled(true);
            switch (selectedItem) {
                case "Doom":
                    this.guiLogic.loadPalette("DoomPalette.pal");
                    break;
                case "Heretic":
                    this.guiLogic.loadPalette("HereticPalette.pal");
                    break;
                case "Hexen":
                    this.guiLogic.loadPalette("HexenPalette.pal");
                    break;
                case "6-bit RGB":
                    this.guiLogic.load6bitRGBPalette();
                    break;
                case "8-bit RGB":
                    this.guiLogic.load8bitRGBPalette();
                    break;
                default:
                    this.guiLogic.loadPalette(null);
                    break;
            }

            activateRefresh(); // this is better approach since race condition is over                        

            synchronized (objWrkPal) {
                try {
                    objWrkPal.wait();
                } catch (InterruptedException ex) {
                    Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        } else {
            synchronized (objReset) {
                try {
                    objReset.wait();
                } catch (InterruptedException ex) {
                    Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }

    // method to display information about the program
    private void infoAbout() {
        URL icon_url = getClass().getResource(RESOURCES_DIR + LICENSE_LOGO_FILE_NAME);
        if (icon_url != null) {
            StringBuilder sb = new StringBuilder();
            sb.append("<html><b>VERSION 1.7.5 - WARDEN (PUBLIC BUILD reviewed on 2020-01-29 at 18:00).</b></html>\n");
            sb.append("<html><b>This software is free software, </b></html>\n");
            sb.append("<html><b>licensed under GNU General Public License (GPL).</b></html>\n");
            sb.append("\n");
            sb.append("Changelog:\n");
            sb.append("\t- New effect feature (from another program) - \"Shadow\". [FireSeraphim]\n");
            sb.append("\t- Multiplier is affected when choosing shadow.\n");
            sb.append("\n");
            sb.append("Objective:\n");
            sb.append("\tThe purpose of this program is viewing and creating Byte Map and Lump Fonts for \n");
            sb.append("\tthe newest generation of Doom ports including ZDoom, GZDoom and Zandronum.\n");
            sb.append("\n");
            sb.append("<html><b>Copyright © 2020</b></html>\n");
            sb.append("<html><b>Alexander \"Ermac\" Stojanovich</b></html>\n");
            ImageIcon icon = new ImageIcon(icon_url);
            JOptionPane.showMessageDialog(this, sb.toString(), "About", JOptionPane.INFORMATION_MESSAGE, icon);
        }
    }

    // method to display help (read from the file)
    private void infoHelp() {
        InputStream help_in = getClass().getResourceAsStream(RESOURCES_DIR + HELP_FILE_NAME);
        URL icon_url = getClass().getResource(RESOURCES_DIR + LOGOX_FILE_NAME);
        if (help_in != null && icon_url != null) {
            try {
                BufferedReader br = new BufferedReader(new InputStreamReader(help_in));
                String line;
                String displayMsg = "";
                while ((line = br.readLine()) != null) {
                    displayMsg += line + "\n";
                }
                br.close();
                ImageIcon icon = new ImageIcon(icon_url);
                JOptionPane.showMessageDialog(this, displayMsg, "Help", JOptionPane.INFORMATION_MESSAGE, icon);
            } catch (IOException ex) {
                Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    // method to display tips (read from the file)
    private void infoTips() {
        InputStream tips_in = getClass().getResourceAsStream(RESOURCES_DIR + TIPS_FILE_NAME);
        URL icon_url = getClass().getResource(RESOURCES_DIR + LOGOX_FILE_NAME);
        if (tips_in != null && icon_url != null) {
            try {
                BufferedReader br = new BufferedReader(new InputStreamReader(tips_in));
                String line;
                String displayMsg = "";
                while ((line = br.readLine()) != null) {
                    displayMsg += line + "\n";
                }
                br.close();
                ImageIcon icon = new ImageIcon(icon_url);
                JOptionPane.showMessageDialog(this, displayMsg, "Tips", JOptionPane.INFORMATION_MESSAGE, icon);
            } catch (IOException ex) {
                Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    // Asynchronous reset - returns program into initial state
    private void reset() {
        this.resetTriggered = true;
        this.mode = Operation.LOAD;
        // radio button reset
        this.radioButtonLoadPre.setSelected(true);
        this.radioButtonCreate.setSelected(false);
        // font reset
        this.fontSelector.setSelectedIndex(0);
        this.fontBold.setSelected(false);
        this.fontItalic.setSelected(false);
        this.fontSize.setValue(12);
        this.infoStrTextFld.setText("");
        this.testStrTextFld.setText("");
        this.fontTestTransparency.setSelected(false);
        this.fontLoadFormatTextFld.setText("");
        this.fontDerFormatSelector.setSelectedIndex(0);
        // color and effects reset        
        this.paletteSelector.setSelectedIndex(0);
        this.useGradient.setSelected(false);
        this.useOutline.setSelected(false);
        this.useAntialiasing.setSelected(false);
        this.widthAmount.setValue(1);
        this.useShadow.setSelected(false);
        this.shadowAngleValue.setValue(45);
        // text reset
        this.textFirstChar.setValue(32);
        this.textLastChar.setValue(127);
        this.textSpacing.setValue(0);
        this.textMultiplier.setValue(1.0);
        this.textSample.setText("");
        this.textSample.setFont(new Font(this.fontSelector.getItemAt(0), 12, Font.PLAIN));
        this.textFirstCharValue.setText("");
        this.textLastCharValue.setText("");
        // image reset                
        this.imagePreview.setIcon(null);
        this.imageZoomSlider.setValue(100);
        this.imageZoomPercentLabel.setText("100%");
        // more reset        
        this.guiLogic.reset();
        this.resetTriggered = false;
        synchronized (objReset) {
            objReset.notifyAll();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bgButton;
    private javax.swing.JLabel bgLabel;
    private javax.swing.JPanel effectsPanel;
    private javax.swing.JButton fgButton;
    private javax.swing.JLabel fgLabel;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuItem fileOpen;
    private javax.swing.JFileChooser fileOpener;
    private javax.swing.JMenuItem fileQuit;
    private javax.swing.JMenuItem fileReset;
    private javax.swing.JMenuItem fileSave;
    private javax.swing.JMenuItem fileSaveAs;
    private javax.swing.JFileChooser fileSaver;
    private javax.swing.JLabel firstCharSemicolon;
    private javax.swing.JCheckBox fontBold;
    private javax.swing.JLabel fontDerFormatLabel;
    private javax.swing.JComboBox<String> fontDerFormatSelector;
    private javax.swing.JPanel fontFormatPanel;
    private javax.swing.JCheckBox fontItalic;
    private javax.swing.JLabel fontLoadFormatLabel;
    private javax.swing.JTextField fontLoadFormatTextFld;
    private javax.swing.JPanel fontModePanel;
    private javax.swing.JLabel fontNameLabel;
    private javax.swing.JPanel fontPanel;
    private javax.swing.JComboBox<String> fontSelector;
    private javax.swing.JSpinner fontSize;
    private javax.swing.JLabel fontSizeLabel;
    private javax.swing.JCheckBox fontTestTransparency;
    private javax.swing.JPanel imagePanel;
    private javax.swing.JLabel imagePreview;
    private javax.swing.JScrollPane imageScrollPane;
    private javax.swing.JLabel imageZoomLabel;
    private javax.swing.JLabel imageZoomPercentLabel;
    private javax.swing.JSlider imageZoomSlider;
    private javax.swing.JMenuItem infoAbout;
    private javax.swing.JMenuItem infoHelp;
    private javax.swing.JMenu infoMenu;
    private javax.swing.JLabel infoStrLabel;
    private javax.swing.JTextField infoStrTextFld;
    private javax.swing.JMenuItem infoTips;
    private javax.swing.JLabel lastCharSemicolon;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JButton outlineColorButton;
    private javax.swing.JLabel outlineLabel;
    private javax.swing.JLabel palLabel;
    private javax.swing.JPanel palettePreview;
    private javax.swing.JComboBox<String> paletteSelector;
    private javax.swing.JRadioButton radioButtonCreate;
    private javax.swing.ButtonGroup radioButtonGroup;
    private javax.swing.JRadioButton radioButtonLoadPre;
    private javax.swing.JPopupMenu.Separator separator1;
    private javax.swing.JPopupMenu.Separator separator2;
    private javax.swing.JPopupMenu.Separator separator3;
    private javax.swing.JButton shColorButton;
    private javax.swing.JLabel shLabel;
    private javax.swing.JLabel shadowAngleLabel;
    private javax.swing.JSpinner shadowAngleValue;
    private javax.swing.JLabel testStrLabel;
    private javax.swing.JTextField testStrTextFld;
    private javax.swing.JSpinner textFirstChar;
    private javax.swing.JLabel textFirstCharValue;
    private javax.swing.JSpinner textLastChar;
    private javax.swing.JLabel textLastCharValue;
    private javax.swing.JSpinner textMultiplier;
    private javax.swing.JLabel textMultiplierLabel;
    private javax.swing.JPanel textPanel;
    private javax.swing.JTextArea textSample;
    private javax.swing.JScrollPane textSampleSP;
    private javax.swing.JSpinner textSpacing;
    private javax.swing.JLabel textSpacingLabel;
    private javax.swing.JLabel textSupportedIcon;
    private javax.swing.JCheckBox useAntialiasing;
    private javax.swing.JCheckBox useGradient;
    private javax.swing.JCheckBox useOutline;
    private javax.swing.JCheckBox useShadow;
    private javax.swing.JSpinner widthAmount;
    private javax.swing.JLabel widthLabel;
    // End of variables declaration//GEN-END:variables
}
